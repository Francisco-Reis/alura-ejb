============= EJB ================
Enterprise Java Beans

Classes que acessam servicoes do servidor de aplicacoes e sao gerenciadas por ele.
Sao inicializados auto pelo servidor.
Ex:
Pool de Conexoes
Error handling
Web Services

Annotation @Stateless:
Faz a classe se transformar em uma EJB (Tipo Stateless Session Bean)

JNDI:
Registro das EJBs no servidor de aplicacoes.
O servidor registra as EJBs ao inicializar e usa esses registros para localiza-las

Annotation @Inject:
Faz com que o EJB seja instanciado pelo servidor de aplicacoes

Servidor de Aplicações que implemente as especificações da arquitetura Java Enterprise Edition (JEE)
Tomcat (Parcial)
Jboss
Glassfish

As regras de negócio são implementadas nos 'Session Beans' (unidades EJB)

Tipo de EJB: Stateless Session Bean
não mantém estado de conversão com o cliente,
não tem compromisso de manter uma sessão,
são intercambiáveis e
podem ser alocados de um pool e são EJBs econômicos;

Pagina login livraria:
http://localhost:8080/livraria/login.xhtml
USR:admin
PWD:pass

Metodos CallBack:
Sao chamados quando o appserver cria o objeto, atraves da annotation @PostConstruct

POOL DE SESSION BEAN:
Sao configuraveis. No WildFly, esta no arquivo:
<home>/satandalone/configurations/standalone.xml
O numero de pools está configurado no elemento: <pools>, atributo max-pool-size

EJB TIPO SINGLETON:
Garante que só existirá um objeto
Só faz sentidos para Configuraçoes e Servicos
Use o annotation @Singleton

Annotation @Startup:
Cria o objeto ao subir o appserver e nao sob demanda
Também chamada Eager Inicialization

DICA JAVA: Thread.sleep(20000); // dorme por 20 segundos

EJB TIPO STATEFUL (SBSF):
Objetos proprios do cliente, ex: Carrinho de Compras, cada cliente tem o seu
É um objeto que nao usa pools.
Funciona como o servlet 'HttpSession'. Geralmente a servlet é usada ao inves do bean.

JPA:
Para injetar EntityManager, principal classe do JPA, usuamos a anotation
@PersistenceContext ao inves do simples @Inject

Como o EntityManeger:
.persist(...) : salva os dados na base
.find(...) ou .getReference(...) : Busca os dados na base

==persistence.xml==
Devemos definir um dataqsource em ??? e referencia-lo com a tag
<jta-data-source>java:/NOME-DATASUORCE</jta-data-source>

Preparando o Wildfly para usar o Mysql:
A partir da pasta HOME, crie o seguinte subdiretório: $JBOSS_HOME/modules/com/mysql/main

CONTAINER MANAGED TRANSACTION (CMT)
Padrão do JPA que faz o Appserver gerenciar as transações automaticamente.
